openapi: 3.0.0
info:
  title: CMS API
  description: API for Content Management System
  version: 1.0.0
servers:
  - url: http://localhost:8080/api/v1
paths:
  /users:
    post:
      summary: Create a user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    get:
      summary: Get all users
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserResponse'
  /users/{userId}:
    get:
      summary: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    put:
      summary: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRequest'
      responses:
        '200':
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
    delete:
      summary: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: User deleted successfully
  /tasks:
    post:
      summary: Create a task
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '201':
          description: Task created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
    get:
      summary: Get all tasks
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaskResponse'
  /tasks/{taskId}:
    get:
      summary: Get a task by ID
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
    put:
      summary: Update a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TaskRequest'
      responses:
        '200':
          description: Task updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaskResponse'
    delete:
      summary: Delete a task
      parameters:
        - name: taskId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Task deleted successfully
  /contents:
    post:
      summary: Create content
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentRequest'
      responses:
        '201':
          description: Content created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
    get:
      summary: Get all contents
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ContentResponse'
  /contents/{contentId}:
    get:
      summary: Get content by ID
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
    put:
      summary: Update content
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ContentRequest'
      responses:
        '200':
          description: Content updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ContentResponse'
    delete:
      summary: Delete content
      parameters:
        - name: contentId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Content deleted successfully
  /reviews:
    post:
      summary: Create a review
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
      responses:
        '201':
          description: Review created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
    get:
      summary: Get all reviews
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ReviewResponse'
  /reviews/{reviewId}:
    get:
      summary: Get a review by ID
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
    put:
      summary: Update a review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReviewRequest'
      responses:
        '200':
          description: Review updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReviewResponse'
    delete:
      summary: Delete a review
      parameters:
        - name: reviewId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Review deleted successfully
  /publishingplatforms:
    post:
      summary: Create a publishing platform
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishingPlatformRequest'
      responses:
        '201':
          description: Publishing platform created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishingPlatformResponse'
    get:
      summary: Get all publishing platforms
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PublishingPlatformResponse'
  /publishingplatforms/{platformId}:
    get:
      summary: Get a publishing platform by ID
      parameters:
        - name: platformId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishingPlatformResponse'
    put:
      summary: Update a publishing platform
      parameters:
        - name: platformId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishingPlatformRequest'
      responses:
        '200':
          description: Publishing platform updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PublishingPlatformResponse'
    delete:
      summary: Delete a publishing platform
      parameters:
        - name: platformId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Publishing platform deleted successfully
components:
  schemas:
    UserRequest:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [ADMIN, REVIEWER, CONTRIBUTOR]
    UserResponse:
      type: object
      properties:
        userId:
          type: integer
        username:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [ADMIN, REVIEWER, CONTRIBUTOR]
    TaskRequest:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        deadline:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, IN_PROGRESS, COMPLETED, FAILED]
        assignedToUserId:
          type: integer
        targetPlatformIds:
          type: array
          items:
            type: integer
    TaskResponse:
      type: object
      properties:
        taskId:
          type: integer
        title:
          type: string
        description:
          type: string
        deadline:
          type: string
          format: date-time
        status:
          type: string
          enum: [PENDING, IN_PROGRESS, COMPLETED, FAILED]
        assignedTo:
          $ref: '#/components/schemas/UserResponse'
        targetPlatforms:
          type: array
          items:
            $ref: '#/components/schemas/PublishingPlatformResponse'
    ContentRequest:
      type: object
      properties:
        type:
          type: string
        data:
          type: string
        version:
          type: string
        status:
          type: string
          enum: [DRAFT, IN_REVIEW, APPROVED, NEEDS_FIXING, COMPLETED]
        createdByUserId:
          type: integer
        taskId:
          type: integer
    ContentResponse:
      type: object
      properties:
        contentId:
          type: integer
        type:
          type: string
        data:
          type: string
        version:
          type: string
        status:
          type: string
          enum: [DRAFT, IN_REVIEW, APPROVED, NEEDS_FIXING, COMPLETED]
        createdBy:
          $ref: '#/components/schemas/UserResponse'
        belongsTo:
          $ref: '#/components/schemas/TaskResponse'
        reviews:
          type: array
          items:
            $ref: '#/components/schemas/ReviewResponse'
    ReviewRequest:
      type: object
      properties:
        feedback:
          type: string
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
        reviewedByUserId:
          type: integer
        contentId:
          type: integer
    ReviewResponse:
      type: object
      properties:
        reviewId:
          type: integer
        feedback:
          type: string
        status:
          type: string
          enum: [PENDING, APPROVED, REJECTED]
        reviewedBy:
          $ref: '#/components/schemas/UserResponse'
        content:
          $ref: '#/components/schemas/ContentResponse'
    PublishingPlatformRequest:
      type: object
      properties:
        platformName:
          type: string
        APIIntegrationDetails:
          type: string
    PublishingPlatformResponse:
      type: object
      properties:
        platformId:
          type: integer
        platformName:
          type: string
        APIIntegrationDetails:
          type: string
